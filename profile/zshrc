# History
HIST_STAMPS="yyyy-mm-dd"
HISTFILE=$HOME/.zsh_history
HISTSIZE=10000
SAVEHIST=$HISTSIZE
setopt hist_ignore_all_dups # remove older duplicate entries from history
setopt hist_reduce_blanks   # remove superfluous blanks from history items
setopt inc_append_history   # save history entries as soon as they are entered
setopt share_history        # share history between different instances of the shell

# Paths
export PATH=$PATH:$HOME/bin:/usr/local/bin:$HOME/.local/bin
export MANPATH=$MANPATH:/usr/local/man
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
export LANG=en_US.UTF-8

# Alias
alias ls='ls --color=auto'
alias grep='grep --color=auto'

# TMUX
if [[ "$TMUX" = "" ]]; then tmux; fi

# EDITOR
if [[ -f $(which nvim) ]]; then
  export VISUAL='vi'
  export EDITOR="$VISUAL"
  alias vi='nvim'
fi

if [ -d "$GOPATH" ]; then export PATH="$PATH:$GOPATH/bin"; fi # GOLANG

# Zshrc
if [[ -d ~/.zsh.d ]]; then
  source ~/.zsh.d/common.zsh
fi

# Autocomplete
autoload -Uz bashcompinit && bashcompinit
autoload -Uz compinit && compinit

setopt auto_cd                                                              # cd by typing directory name if it's not a command
setopt auto_list                                                            # automatically list choices on ambiguous completion
setopt auto_menu                                                            # automatically use menu completion
setopt always_to_end                                                        # move cursor to end if word had one match
zstyle ':completion:*' menu select                                          # select completions with arrow keys
zstyle ':completion:*' group-name ''                                        # group results by category
zstyle ':completion:::::' completer _expand _complete _ignored _approximate # enable approximate matches for completion
zstyle ':completion:*:make:*:targets' call-command true                     # outputs all possible results for make targets
zstyle ':completion:*:make:*' tag-order targets
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*' special-dirs true

if [[ -d $HOME/.asdf ]]; then source $HOME/.asdf/asdf.sh && source $HOME/.asdf/completions/asdf.bash; fi # ASDF
if [[ -f $(which kubectl) ]]; then source <(kubectl completion zsh); fi                                  # Kubectl
if [[ -d $HOME/.krew/bin ]]; then export PATH="$PATH:$HOME/.krew/bin"; fi                                # Krew
if [[ -f $(which helm) ]]; then source <(helm completion zsh); fi                                        # Helm
if [[ -f $(which kind) ]]; then source <(kind completion zsh); fi                                        # Kind
if [[ -f $(which terraform) ]]; then complete -o nospace -C $(which terraform) terraform; fi             # Terraform
if [[ -f $(which aws) ]]; then complete -C "$HOME/bin/aws_completer" aws; fi                             # AWS
if [[ -f $(which az) ]]; then source /etc/bash_completion.d/azure-cli; fi                                # Azure
if [[ -f $(which gcloud) ]]; then; source /etc/bash_completion.d/gcloud; fi                              # Google

# zInit: https://github.com/zdharma/zinit
if [[ ! -d ~/.zinit ]]; then
  git clone https://github.com/zdharma/zinit.git ~/.zinit/bin
fi

source ~/.zinit/bin/zinit.zsh

autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

zinit for light-mode \
  zsh-users/zsh-syntax-highlighting \
  zsh-users/zsh-autosuggestions \
  zsh-users/zsh-completions \
  zsh-users/zsh-history-substring-search \
  superbrothers/zsh-kubectl-prompt \
  pick"async.zsh" src"pure.zsh" \
  sindresorhus/pure

zinit ice atclone"dircolors -b LS_COLORS > c.zsh" atpull'%atclone' pick"c.zsh" nocompile'!'

# Zstyle!
autoload -Uz vcs_info
autoload -U colors && colors
autoload -U promptinit && promptinit
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
zstyle ':vcs_info:git:*' formats '%F{240}(%b)%r%f'
zstyle ':vcs_info:*' enable git
zstyle ':zsh-kubectl-prompt:' separator '|'
PROMPT="%F{113}%m%F{227}の%F{197}%n %{$reset_color%}❯ " # 魔(demon) 亀 (Kame) 武(Wu) 悟 (Go) の ✯ ☭ ツ ㅎ Æ
if [[ -d $HOME/.kube ]]; then
  RPROMPT='%F{#af00ff%}($ZSH_KUBECTL_PROMPT)%{$reset_color%}'
else
  RPROMPT='%F{227}Klaatu Barada Nitko!'
fi
