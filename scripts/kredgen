#!/bin/bash
# Create kubeconfig credentials with pre-defined RBAC policies

while getopts :u:n: opt; do
  case $opt in
    u)
      user="${OPTARG}"
      ;;
    n)
      namespace="${OPTARG}"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

KUBECTL_BIN=$(which kubectl)

$KUBECTL_BIN create namespace $user
$KUBECTL_BIN -n $namespace create sa $user
# ROLES: cluster-admin, admin, edit, view
$KUBECTL_BIN -n $namespace create clusterrolebinding $user --clusterrole view --serviceaccount=$namespace:$user
$KUBECTL_BIN -n $namespace create rolebinding $user --clusterrole admin --serviceaccount=$namespace:$user

secret=`$KUBECTL_BIN -n $namespace get sa $user -o json | jq -r .secrets[].name`
$KUBECTL_BIN -n $namespace get secret $secret -o json | jq -r '.data["ca.crt"]' | base64 -d > ca.crt
token=`$KUBECTL_BIN -n $namespace get secret $secret -o json | jq -r '.data["token"]' | base64 -d`
cluster_name=`$KUBECTL_BIN config view -o json | jq -r .clusters[].name`
endpoint=`$KUBECTL_BIN config view -o json | jq -r .clusters[].cluster.server`

KUBECONFIG=k8s-$user-conf $KUBECTL_BIN config set-cluster $cluster_name \
    --embed-certs=true \
    --server=$endpoint \
    --certificate-authority=./ca.crt

KUBECONFIG=k8s-$user-conf $KUBECTL_BIN config set-credentials $user --token=$token

KUBECONFIG=k8s-$user-conf $KUBECTL_BIN config set-context $user \
    --cluster=$cluster_name \
    --namespace=$namespace \
    --user=$user

KUBECONFIG=k8s-$user-conf $KUBECTL_BIN config use-context $user

# Delete rootCA & Rename Kubeconfig file
rm ca.crt
mv k8s-$user-conf kubeconfig.$namespace.$user
